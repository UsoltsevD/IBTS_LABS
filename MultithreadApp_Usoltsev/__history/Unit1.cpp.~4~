//---------------------------------------------------------------------------

#include <System.hpp>
#pragma hdrstop

#include "Unit1.h"
#include "Unit2.h"
#include "Unit3.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------

//   Important: Methods and properties of objects in VCL can only be
//   used in a method called using Synchronize, for example:
//
//      Synchronize(&UpdateCaption);
//
//   where UpdateCaption could look like:
//
//      void __fastcall ReadThread::UpdateCaption()
//      {
//        Form1->Caption = "Updated in a thread";
//      }
//---------------------------------------------------------------------------

__fastcall ReadThread::ReadThread(bool CreateSuspended)
	: TThread(CreateSuspended)
{
	FreeOnTerminate = true;
	myEvent = new TEvent(NULL, true, false, "", false);
	ProcessThreadPtr = new ProcessThread(myEvent, true);
	ProcessThreadPtr->dataBufferPtr = dataBuffer;

	ProcessThreadPtr->Terminate();
	delete ProcessThreadPtr;
}
//---------------------------------------------------------------------------
void __fastcall ReadThread::Execute()
{

	// Ввод буквы носителя с консоли
	wchar_t MediaType[64]; // массив

//	UnicodeString deviceName = Form1->Edit1->Text;
//	wchar_t MediaType1 = deviceName.w_str()[0];
//	swprintf(MediaType,L"\\\\.\\%c:",MediaType1); //выводит данные в Edit
	UnicodeString deviceName = "H";
	HANDLE fileHandle = CreateFile(
		MediaType, // Имя файла/устройства (wchar*)
		GENERIC_READ, // режим доступа
		FILE_SHARE_READ, //Режим совместной работы
		NULL, // Атрибуты безопасности
		OPEN_EXISTING, //способ открытия
		FILE_ATTRIBUTE_NORMAL, //флаги и атрибуты
		NULL
		//Описатель (идентификатор) файла шаблона с правами доступа GENERIC_READ
		);
	if(fileHandle == INVALID_HANDLE_VALUE)
	{
	   Form2->Label1->Caption = "Требуются права администратора";
	   CloseHandle(fileHandle);
	   return;
	}
	LARGE_INTEGER sectorOffset;
	sectorOffset.QuadPart = 0; //чтобы позиционироваться в начале
	// Задать позицию
	unsigned long currentPosition = SetFilePointer(
		  fileHandle,
		  sectorOffset.LowPart,// младшая часть LARGE_INTEGER
		  &sectorOffset.HighPart, // старшая часть
		  FILE_BEGIN
	// Точка в файле, относительно которой необходимо позиционироваться
	// (FILE_BEGIN, FILE_CURRENT, FILE_END)
		);
	if(currentPosition != sectorOffset.LowPart)
	{
		Form2->Label1->Caption = "Недопустимая позиция курсора";
		CloseHandle(fileHandle);
		return;
	}
	ProcessThreadPtr->Start();
	DWORD bytesToRead = 1024*512; // сколько нужно считать
	DWORD bytesRead; // сколько удалось считать

	while(true)
	{
		//Ресурсоемкая операция чтения данных
		// Чтение данных
		bool readResult = ReadFile(
			  fileHandle, // дескриптор
			  dataBuffer, // куда читаем данные
			  bytesToRead,
			  &bytesRead,
			  NULL //ручное управление буферизацией
			);
		if(readResult == false || bytesRead != bytesToRead)
		{
			Form2->Label1->Caption = "Ошибка чтения данных";
			break;
		}
		Sleep(100);
		//Synchronize(&UpdateLabel);
		//Уведомить второй поток о готовности данных
		myEvent->SetEvent();
		Sleep(20);
		while (myEvent->WaitFor(0) == wrSignaled)
		{
			Sleep(10);
		}
		// Завершить поток по требованию
		if(Terminated) break;
	}
	CloseHandle(fileHandle);
	ProcessThreadPtr->Terminate();
	delete ProcessThreadPtr;
}
//---------------------------------------------------------------------------
